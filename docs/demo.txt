README.mdの[AKSクラスタの作成]まで完了している事

(オプショナル) Dashboard(k8sのUI)を導入
https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/
手順
https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md

kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.1/aio/deploy/recommended.yaml
kubectl apply -f yaml/dashboard-adminuser.yaml
kubectl -n kubernetes-dashboard create token admin-user
kubectl proxy
open http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/


(オプショナル) Lensの導入 
https://k8slens.dev/  
WSL2環境の場合、https://backpackkevin.com/lens-ide-working-with-wsl-2/

(オプショナル Lensにモニタ結果が表示されるようになる)
Prometheus
kubectl create ns monitoring
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo add stable https://charts.helm.sh/stable
helm repo update
helm install prometheus-stack prometheus-community/kube-prometheus-stack -n monitoring

-------------------------------
(オプショナル)デフォルトのネームスペースを指定
kubectl create namespace iris-ns
kubectl config set-context $(kubectl config current-context) --namespace=iris-ns

Pod
-------------------------------
kubectl run iris --image=containers.intersystems.com/intersystems/iris-community:2022.1.0.209.0 -- "--check-caps false"
(2022.2以降はcheck-caps引数不要)
kubectl describe pod iris
kubectl logs iris
kubectl exec -ti iris -- bash
kubectl exec -ti iris -- iris session iris
kubectl delete pod iris

StatefulSet
-------------------------------
kubectl apply -f yaml/iris-ssd-sc-aks.yaml
kubectl apply -f yaml/iris-configmap-cpf.yaml
kubectl apply -f yaml/iris-statefulset.yml
kubectl exec -ti iris-0 -- iris session iris
kubectl get svc
  NAME      TYPE           CLUSTER-IP    EXTERNAL-IP     PORT(S)           AGE
  my-iris   LoadBalancer   10.0.239.90   20.188.20.225   52773:30699/TCP   16s
  http://EXTERNAL-IP:52773/csp/sys/%25CSP.Portal.Home.zen
replicas: 1->2
kubectl apply -f yaml/iris-statefulset.yml
kubectl delete -f yaml/iris-statefulset.yml
kubectl get pvc
kubectl delete pvc -l app=my-iris

IKO
-------------------------------
shell/prep-iris-cluster.sh
helm install intersystems chart/iris-operator --wait
kubectl apply -f yaml/iris-iko.yaml
kubectl get statefulset -o wide
kubectl get iriscluster   (runningを確認)
kubectl get pvc
kubectl get svc
  http://EXTERNAL:52773/csp/sys/%25CSP.Portal.Home.zen
  ミラーモニタで、ミラー名がIRISMIRROR1であること、メンバIRIS-VS2021-DATA-0-0がプライマリであることを確認

プライマリメンバ上で更新を実行
kubectl exec -ti iris-vs2021-data-0-0 -- iris session iris -U IRISCLUSTER
IRISCLUSTER>f i=1:1:1000 s ^a(i)=i
IRISCLUSTER>h

バックアップメンバ上で更新を実行
kubectl exec -ti iris-vs2021-data-0-1 -- iris session iris -U IRISCLUSTER
IRISCLUSTER>zw ^a
  ・
  ・
^a(998)=998
^a(999)=999
^a(1000)=1000
IRISCLUSTER>s ^a=1

S ^a=1
^
<PROTECT> ^a,/irissys/data/IRIS/mgr/iriscluster/
IRISCLUSTER>h

ECPクライアントからのアクセスを確認
kubectl exec -ti iris-vs2021-compute-0 -- iris session iris -U IRISCLUSTER
IRISCLUSTER>zw ^a
  ・
  ・
^a(998)=998
^a(999)=999
^a(1000)=1000
IRISCLUSTER>h

kubectl delete pod iris-vs2021-data-0-0
(BackupがPrimaryに切り替わる)
kubectl exec -ti iris-vs2021-data-0-1 -- iris session iris -U IRISCLUSTER
IRISCLUSTER>s ^x=1
IRISCLUSTER>h

(削除したpodは自動回復し、やがてBackupメンバで起動する)
kubectl exec -ti iris-vs2021-data-0-0 -- iris session iris -U IRISCLUSTER
IRISCLUSTER>s ^x=2
S ^x=2
^
<PROTECT> ^x,/irissys/data/IRIS/mgr/iriscluster/
IRISCLUSTER>w ^x
1
IRISCLUSTER>h


各IRISインスタンスの管理ポータルへのアクセス方法
kubectl port-forward iris-vs2021-data-0-1 9999:52773
kubectl port-forward iris-vs2021-compute-0 9999:52773

IRISクラスタの削除
kubectl delete -f yaml/iris-iko.yaml
kubectl delete pvc -l intersystems.com/name=iris-vs2021

IKOが実施したcpf mergeの内容を確認する方法
kubectl describe cm iris-vs2021-data-0

-------------------------------------------------
独自イメージのビルドおよびデプロイ

独自イメージのビルド
$ docker build ./build -t dpmeister/irisdemo:simple

独自イメージ(data用)をプライベートレポにPush
$ docker push dpmeister/irisdemo:simple

IRISイメージ(compute用)をプライベートレポにPush
$ docker tag containers.intersystems.com/intersystems/iris:2022.1.0.209.0 dpmeister/irisdemo:iris-2022.1.0.209.0
(本来なら、有償のプライベートレポを契約し、dpmeister/iris:2022.1.0.209.0という名称でpushするべき)
$ docker push dpmeister/irisdemo:iris-2022.1.0.209.0

ArbiterイメージをプライベートレポにPush
$ docker tag containers.intersystems.com/intersystems/arbiter:2022.1.0.209.0 dpmeister/irisdemo:arbiter-2022.1.0.209.0
$ docker push dpmeister/irisdemo:arbiter-2022.1.0.209.0

IKOでデプロイ
shell/prep-iris-cluster.sh
helm install intersystems chart/iris-operator --wait
kubectl apply -f yaml/iris-iko-userimage.yaml

(プライマリの)DATAノードにてテーブルにデータをロードし、COMPUTEノードから参照可能であることを確認する
$ kubectl exec -ti iris-vs2021-data-0-0 -- iris session iris -U MYAPP
MYAPP>w ##class(MyApp.Utils).LoadCSV()
1
MYAPP>d $SYSTEM.SQL.Shell()
[SQL]MYAPP>>select * from person

PID     name    born
1       キアヌ・リーブス        1964
2       キャリー＝アン・モス    1967
    ・
    ・
6       ラナ・ウォシャウスキー  1965
7       ジョエル・シルバー      1952
---------------------------------------------------------------------------
[SQL]MYAPP>>q

$ kubectl exec -ti iris-vs2021-compute-0 -- iris session iris -U MYAPP
MYAPP>d $SYSTEM.SQL.Shell()
同じSQLを発行して同一の出力となることを確認する。
