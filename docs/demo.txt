README.mdの[AKSクラスタの作成]まで完了している事

# オプショナル
実行してもしなくても良い内容。
optional.txt

# Pod起動

Pod
-------------------------------
kubectl run iris --image=containers.intersystems.com/intersystems/iris-community:2023.2.0.227.0 --
kubectl describe pod iris
kubectl logs iris
kubectl exec -ti iris -- bash
kubectl exec -ti iris -- iris session iris
kubectl delete pod iris


# StatefulSet起動
-------------------------------
kubectl apply -f yaml/iris-ssd-sc-aks.yaml
kubectl apply -f yaml/iris-configmap-cpf.yaml
kubectl apply -f yaml/iris-statefulset.yml
kubectl exec -ti iris-0 -- iris session iris
kubectl get svc
  NAME      TYPE           CLUSTER-IP    EXTERNAL-IP     PORT(S)           AGE
  my-iris   LoadBalancer   10.0.239.90   20.188.20.225   52773:30699/TCP   16s
  http://EXTERNAL-IP:52773/csp/sys/%25CSP.Portal.Home.zen
replicas: 1->2
kubectl apply -f yaml/iris-statefulset.yml
kubectl delete -f yaml/iris-statefulset.yml
kubectl get pvc
kubectl delete pvc -l app=my-iris

# IKOによるバニラIRISのデプロイ
-------------------------------
shell/prep-iris-cluster.sh
helm install intersystems chart/iris-operator --wait


kubectl apply -f yaml/iris-iko.yaml
kubectl get statefulset -o wide
kubectl get iriscluster   (runningを確認)
kubectl get pvc
kubectl get svc
  http://EXTERNAL:52773/csp/sys/%25CSP.Portal.Home.zen
  ミラーモニタで、ミラー名がIRISMIRROR1であること、メンバIRIS-VS2021-DATA-0-0がプライマリであることを確認

プライマリメンバ上で更新を実行
kubectl exec -ti iris-vs2021-data-0-0 -- iris session iris -U IRISCLUSTER
IRISCLUSTER>f i=1:1:1000 s ^a(i)=i
IRISCLUSTER>h

バックアップメンバ上で上記の更新が反映されていることと、更新が失敗する事を確認
kubectl exec -ti iris-vs2021-data-0-1 -- iris session iris -U IRISCLUSTER
IRISCLUSTER>zw ^a
  ・
  ・
^a(998)=998
^a(999)=999
^a(1000)=1000
IRISCLUSTER>s ^a=1

S ^a=1
^
<PROTECT> ^a,/irissys/data/IRIS/mgr/iriscluster/
IRISCLUSTER>h

ECPクライアントからのアクセスを確認
kubectl exec -ti iris-vs2021-compute-0 -- iris session iris -U IRISCLUSTER
IRISCLUSTER>zw ^a
  ・
  ・
^a(998)=998
^a(999)=999
^a(1000)=1000
IRISCLUSTER>h

kubectl delete pod iris-vs2021-data-0-0
(BackupがPrimaryに切り替わる)
kubectl exec -ti iris-vs2021-data-0-1 -- iris session iris -U IRISCLUSTER
IRISCLUSTER>s ^x=1
IRISCLUSTER>h

(削除したpodは自動回復し、やがてBackupメンバで起動する)
kubectl exec -ti iris-vs2021-data-0-0 -- iris session iris -U IRISCLUSTER
IRISCLUSTER>s ^x=2
S ^x=2
^
<PROTECT> ^x,/irissys/data/IRIS/mgr/iriscluster/
IRISCLUSTER>w ^x
1
IRISCLUSTER>h


各IRISインスタンスの管理ポータルへのアクセス方法
(コミュニティエディションなので、PWSがポート52773で稼働しています)
kubectl port-forward iris-vs2021-data-0-0 9999:52773
あるいは
kubectl port-forward iris-vs2021-compute-0 9999:52773

http://localhost:9999/csp/bin/Systems/Module.cxw
http://localhost:9999/csp/sys/%25CSP.Portal.Home.zen

IKOが実施したcpf mergeの内容を確認する方法
kubectl describe cm iris-vs2021-data-0

IRISクラスタの削除
kubectl delete -f yaml/iris-iko.yaml
kubectl delete pvc -l intersystems.com/name=iris-vs2021

# IKOによるユーザ作成のコンテナイメージのデプロイ

独自イメージとNGINXを使用して、POSTはDATAに、GETはCOMPUTEに転送される環境をセットアップします。

イメージのビルドとテスト方法はbuild.txt。
    
ユーザ作成のコンテナイメージ取得時のクレデンシャル情報
(プライベートリポジトリ上にある)ユーザ作成のイメージを使用する場合は、そのイメージを取得するためのdocker loginを実行してください。

dockerのクレデンシャル情報は、[prep-iris-cluster.sh](shell/prep-iris-cluster.sh)で使用されます

IKOでデプロイ
もしpvが残っていたら削除します。
kubectl delete pvc -l intersystems.com/name=iris-vs2021

(shell/prep-iris-cluster.sh もし未実行であれば)
kubectl apply -f yaml/iris-iko-userimage.yaml

(プライマリの)DATAノードにてテーブルにデータをロードし、COMPUTEノードから参照可能であることを確認する
$ kubectl exec -ti iris-vs2021-data-0-0 -- iris session iris -U MYAPP
MYAPP>w ##class(MyApp.Utils).LoadCSV()
1
MYAPP>:sql
[SQL]MYAPP>>select * from person

PID     name    born
1       キアヌ・リーブス        1964
2       キャリー＝アン・モス    1967
    ・
    ・
6       ラナ・ウォシャウスキー  1965
7       ジョエル・シルバー      1952
---------------------------------------------------------------------------
[SQL]MYAPP>>q

バックアップのDATAノードでSELECT実行
$ kubectl exec -ti iris-vs2021-data-0-1 -- iris session iris -U MYAPP
MYAPP>:sql
同じSQLを発行して同一の出力となることを確認する。

ComputeノードでSELECT実行
$ kubectl exec -ti iris-vs2021-compute-0 -- iris session iris -U MYAPP
MYAPP>:sql
同じSQLを発行して同一の出力となることを確認する。


**** ここから先は、実験中です。期待通りには動作しません。 ****


# NGINXを使用したロードバランス例(実験中につき未完成)

アクセス時にその応答から接続先がわかるように、WGW(サイドカー)用のApacheのindex.htmlの書き換え。
kubectl exec -ti iris-vs2021-compute-0 -c webgateway -- bash -c 'echo "<html><body>compute-0</body></html>" > /var/www/html/index.html'
kubectl exec -ti iris-vs2021-compute-1 -c webgateway -- bash -c 'echo "<html><body>compute-1</body></html>" > /var/www/html/index.html'
kubectl exec -ti iris-vs2021-data-0-0 -c webgateway -- bash -c 'echo "<html><body>data-0-0</body></html>" > /var/www/html/index.html'
kubectl exec -ti iris-vs2021-data-0-1 -c webgateway -- bash -c 'echo "<html><body>data-0-1</body></html>" > /var/www/html/index.html'

$ kubectl create cm nginx-config --from-file=conf/default.conf
$ kubectl apply -f yaml/nginx.yaml
$ kubectl get svc
NAME                             TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)                       AGE
my-nginx                         LoadBalancer   10.0.187.162   52.253.120.187   80:31131/TCP                  4m41s

NGINXのコンテナにssh
$ kubectl exec -ti service/my-nginx -- bash

$ curl http://52.253.120.187/   <= my-nginxのEXTERNAL-IP 
<html><body>compute-0</body></html>
$ curl -X POST http://52.253.120.187/
<html><body>compute-1</body></html>

以下、nginxのログ出力。
$ kubectl logs -f service/my-nginx

10.224.0.6 - - [06/Sep/2023:02:45:01 +0000] "GET / HTTP/1.1" 200 36 "-" "curl/7.81.0" "-"
10.224.0.5 - - [06/Sep/2023:02:45:13 +0000] "POST / HTTP/1.1" 200 36 "-" "curl/7.81.0" "-"

IRISのREST呼び出し
$ curl http://52.253.120.187/api/monitor/metrics


注意
NGINXのbackendとして指定しているホストのIPが変わると、下記エラーが発生します。
2023/09/06 08:40:16 [error] 21#21: *1047 connect() failed (113: No route to host) while connecting to upstream, client: 10.244.1.1, server: nginx, request: "POST /csp/myapp/test HTTP/1.1", upstream: "http://10.244.1.21:80/csp/myapp/test", host: "20.27.13.103"
10.244.1.1 - appuser [06/Sep/2023:08:40:16 +0000] "POST /csp/myapp/test HTTP/1.1" 502 157 "-" "curl/7.81.0" "-"

プライマリのpodを2連続でdeleteするとこのような状況になります。(自動起動したprimaryのpodのIPが変わる)
そのため、フェールオーバ時には応答が止まってしまいます。

$ curl -X POST http://20.27.13.103/csp/myapp/test -u appuser:sys
<html>
<head><title>504 Gateway Time-out</title></head>
<body>
<center><h1>504 Gateway Time-out</h1></center>
<hr><center>nginx/1.25.2</center>
</body>
</html>

NGINXは起動時に解決したIPをttlに無関係に使い続けるそうです。
https://qiita.com/kawakawaryuryu/items/af5dcb59aea1a10e4939

ちゃんと機能させるためには、HealthCheckを指定URL(/csp/bin/mirror_status.cxw)で能動的にチェックしてくれる機能を持つバランサが要ります。
root@my-nginx-66dc48b8dc-848f4:/# curl http://iris-vs2021-data-0-0.iris-svc.default.svc.cluster.local/csp/bin/mirror_status.cxw
SUCCESS
root@my-nginx-66dc48b8dc-848f4:/# curl http://iris-vs2021-data-0-1.iris-svc.default.svc.cluster.local/csp/bin/mirror_status.cxw
FAILED


$ curl -X POST http://20.27.13.103/csp/myapp/test -v
< HTTP/1.1 401 Unauthorized
SideCarのappの認証方法を設定する方法が無い。

ひとまずログイン認証で動作確認を継続。
$ curl -X POST http://20.27.13.103/csp/myapp/test -u appuser:sys
{"HostName":"iris-vs2021-data-0-0","UserName":"appuser","Method":"Post","TimeStamp":"09/06/2023 07:13:39"}

POST先は"HostName":"iris-vs2021-data-0-0になっている。

$ curl http://20.27.13.103/csp/myapp/test -u appuser:sys
{"HostName":"iris-vs2021-compute-1","UserName":"appuser","Method":"Get","TimeStamp":"09/06/2023 07:14:12","Results":[{"TimeStamp":"09/06/2023 07:14:00"},{"TimeStamp":"09/06/2023 07:13:39"}]}

GET元は"HostName":"iris-vs2021-compute-0(あるいは-1)になっている。

# pythonを使用したロードバランス例(実験中につき未完成)

irismeister@JP7420IWAMOTO:~/git/iris-k8s-vs2021$ kubectl get svc
NAME                             TYPE           CLUSTER-IP    EXTERNAL-IP      PORT(S)                       AGE
simple-server                    LoadBalancer   10.0.131.22   20.222.220.118   80:32295/TCP                  23m

$ curl -u appuser:sys http://20.222.220.118/csp/myapp/test
$ curl -u appuser:sys -X POST -H 'Content-type: application/json' -d '{a:1}' http://20.222.220.118/csp/myapp/test

動くがひどく遅い...。応答に2,3秒かかかってる感じ。

simple-serverからcurl実行してもまだ遅い。
$ kubectl exec -ti service/simple-server -- bash
root@simple-server-79795dcf7c-v278x:/usr/src/app# curl -u appuser:sys http://localhost/csp/myapp/test

どうやらservice公開すると、サービスを通さなくても遅くなる模様。simple-server-nosvc.yamlだと遅くならない。

$ kubectl apply -f yaml/simple-server-nosvc.yaml
$ kubectl exec -ti simple-server-7b4fdc5f46-qh5v2 -- bash
root@simple-server-7b4fdc5f46-qh5v2:/usr/src/app# curl -u appuser:sys http://localhost:8080/csp/myapp/test
[これだけなら早い]

$ kubectl expose deployment simple-server --type=LoadBalancer --name=simple-server --port 8080
[これを実行した後に遅くなった]

*** 断念 ***

ローカル(docker)で実行した場合は、応答がすぐ返ってくる。(8888はsimple-serverのポート)
$ docker compose up -d
$ curl -u appuser:sys http://localhost:8888/csp/myapp/test

各IRISインスタンスの管理ポータルへのアクセス方法
(製品版なので、SideCarのWGWを稼働させています)

kubectl port-forward iris-vs2021-data-0-0 9999:80
あるいは
kubectl port-forward iris-vs2021-compute-0 9999:80

http://localhost:9999/csp/bin/Systems/Module.cxw
http://localhost:9999/csp/sys/%25CSP.Portal.Home.zen

IRISクラスタの削除
kubectl delete -f yaml/iris-iko-userimage.yaml
kubectl delete pvc -l intersystems.com/name=iris-vs2021

